

/*
* 题目:
* 请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。

函数 myAtoi(string s) 的算法如下：

读入字符串并丢弃无用的前导空格
检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。
 如果两者都不存在，则假定结果为正。读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其
 余部分将被忽略。将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没有
 读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，
 需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。
返回整数作为最终结果。
注意：
本题中的空白字符只包括空格字符 ' ' 。
除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。
示例 1：
输入：s = "42"
输出：42
解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。
第 1 步："42"（当前没有读入字符，因为没有前导空格）
         ^
第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
         ^
第 3 步："42"（读入 "42"）
           ^
解析得到整数 42 。
由于 "42" 在范围 [-231, 231 - 1] 内，最终结果为 42 。
*
*
* 题解：
* 一、要求:
* 1.去掉前导括号
* 2.判断正负号
* 3.包括符号在内，要求整数不超过最大-2^31位到2^32-1
* 二、思路:
* 1.按照题目要求，首先去除空括号,用i记录首个不为空格的元素索引
* 2.判断正负号，将正负号用参数sign记录
* 3.将每个数提取出来，并按要求变成整数
* 4.考虑整数溢出的情况
* 5.满足条件并遍历结束，返回sign与整数乘积的值
* */


public class 字符串转整型 {
    public int myAtoi(String s) {
     int i=0;
     //去出前导空格
     while (s.charAt(i)==' '&&i<s.length()){
         i++;
     }
     //判断正负
        int sign=1;
     if(((s.charAt(i)=='-')||(s.charAt(i)=='+'))&&i<s.length()){
         if(s.charAt(i)=='-'){
         sign=-1;
     }
         i++;
     }
     //提取数并判断
        int num=0;
        while (i<s.length()&&Character.isDigit(s.charAt(i))){
            int digit=s.charAt(i)-'0';
            if(num>Integer.MAX_VALUE/10||(num==Integer.MAX_VALUE &&digit>Integer.MAX_VALUE%10)){
                return sign==-1?Integer.MIN_VALUE:Integer.MAX_VALUE;
            }
            num=num*10+digit;
            i++;
        }
        return num*sign;
    }

    public static void main(String[] args) {
        String s="-42";
        字符串转整型 ans=new 字符串转整型();
        int t=ans.myAtoi(s);
        System.out.println(t);
    }
}
